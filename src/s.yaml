# ------------------------------------
#   If you need English case, you can refer to [s_en.yaml] file
# ------------------------------------
#   欢迎您使用阿里云函数计算 FC 组件进行项目开发
#   组件仓库地址：https://github.com/devsapp/fc
#   组件帮助文档：https://www.serverless-devs.com/fc/readme
#   Yaml参考文档：https://www.serverless-devs.com/fc/yaml/readme
#   关于：
#      - Serverless Devs和FC组件的关系、如何声明/部署多个函数、超过50M的代码包如何部署
#      - 关于.fcignore使用方法、工具中.s目录是做什么、函数进行build操作之后如何处理build的产物
#   等问题，可以参考文档：https://www.serverless-devs.com/fc/tips
#   关于如何做CICD等问题，可以参考：https://www.serverless-devs.com/serverless-devs/cicd
#   关于如何进行环境划分等问题，可以参考：https://www.serverless-devs.com/serverless-devs/extend
#   更多函数计算案例，可参考：https://github.com/devsapp/awesome/
#   有问题快来钉钉群问一下吧：33947367
# ------------------------------------
edition: 1.0.0
name: hello-world-app
# access 是当前应用所需要的密钥信息配置：
# 密钥配置可以参考：https://www.serverless-devs.com/serverless-devs/command/config
# 密钥使用顺序可以参考：https://www.serverless-devs.com/serverless-devs/tool#密钥使用顺序与规范
access: nanxuan-test

vars: # 全局变量
  region: "{{ region }}"
  service:
    name: "{{ serviceName }}"
    internetAccess: true
    role: "{{ roleArn }}"
    description: "创建MySQL并使用"
    logConfig: auto


services:
  mysqlCreator: # 业务名称/模块名称
    component: fc
    actions:
      pre-deploy:
        - component: fc build --use-docker --dockerfile ./serverless-terraform-rds/dockerfile
    props:
      region:  ${vars.region} #{{ resource_creator_region }}
      service: ${vars.service}
      function:
        name:  ${vars.service.name}_creator #{{ creator_function_name }}
        description: "create mysql resource"
        runtime: custom-container
        customContainerConfig:
          image:  "{{ acrRegistry }}"
        memorySize: 1024
        timeout: 1800
  mysqlUser:
    component: fc
    actions:
      pre-deploy:
        - plugin: ${path(./plugin)}
          args:
            service_name: ${vars.service.name} #{{ creator_service_name }}
            function_region: ${vars.region} #{{ resource_creator_region }} 函数所在位置
            function_name: ${vars.service.name}_creator #{{ creator_function_name }}
            # oss 配置
            oss_bucket: "{{ ossBucket }}"
            oss_prefix: "{{ ossPrefix }}"
            # 资源限定参数，不同的资源所需不同
            databases: "{{ databasesConfig }}" #[{"name": "db1","character_set": "utf8","description": "test" }]
            instance_name: "{{ instanceName }}"
            account_name: "{{ accountName }}"
            password: "{{ password }}"
            instance_type: "{{ instanceType }}"
        #            allocate_public_connection: true
        #            security_ips: ["0.0.0.0/0"]
        #            privilege: ReadWrite
        #            invoke_type: 0
        - component: fc build --use-docker
    props:
      region: ${vars.region} #{{ resource_region }}
      service: ${vars.service}
      function:
        name: ${vars.service.name}_consumer #{{ consumer_function_name }}
        description: "consume mysql resource"
        runtime: python3.9
        codeUri: ./code
        handler: index.handler
        memorySize: 128
        timeout: 60
